// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketSystem.Persistance.Context;

#nullable disable

namespace TicketSystem.Persistance.Migrations
{
    [DbContext(typeof(TicketAppDbContext))]
    [Migration("20231029010023_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TicketSystem.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "6 October"
                        },
                        new
                        {
                            Id = 2,
                            CityName = "Masr El Gadida"
                        },
                        new
                        {
                            Id = 3,
                            CityName = "New Cairo"
                        });
                });

            modelBuilder.Entity("TicketSystem.Domain.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<string>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DistrictName = "Sheikh Zayed"
                        },
                        new
                        {
                            Id = 2,
                            DistrictName = "El Mohandeseen"
                        },
                        new
                        {
                            Id = 3,
                            DistrictName = "Maadi"
                        });
                });

            modelBuilder.Entity("TicketSystem.Domain.Entities.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<string>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("GovernorateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Governorate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GovernorateName = "Giza"
                        },
                        new
                        {
                            Id = 2,
                            GovernorateName = "Cairo"
                        },
                        new
                        {
                            Id = 3,
                            GovernorateName = "Cairo"
                        });
                });

            modelBuilder.Entity("TicketSystem.Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<int>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DistrictId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DistrictId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Ticket");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CreatedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2628),
                            DistrictId = 1,
                            GovernorateId = 1,
                            LastModifiedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2640),
                            PhoneNumber = "01222868979",
                            Status = "UnHandled"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            CreatedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2643),
                            DistrictId = 2,
                            GovernorateId = 2,
                            LastModifiedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2644),
                            PhoneNumber = "01062065789",
                            Status = "UnHandled"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            CreatedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2647),
                            DistrictId = 3,
                            GovernorateId = 3,
                            LastModifiedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2648),
                            PhoneNumber = "01124464869",
                            Status = "UnHandled"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 3,
                            CreatedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2650),
                            DistrictId = 3,
                            GovernorateId = 3,
                            LastModifiedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2652),
                            PhoneNumber = "01124464869",
                            Status = "UnHandled"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 3,
                            CreatedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2654),
                            DistrictId = 3,
                            GovernorateId = 3,
                            LastModifiedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2655),
                            PhoneNumber = "01124464869",
                            Status = "UnHandled"
                        },
                        new
                        {
                            Id = 7,
                            CityId = 3,
                            CreatedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2658),
                            DistrictId = 3,
                            GovernorateId = 3,
                            LastModifiedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2659),
                            PhoneNumber = "01124464869",
                            Status = "UnHandled"
                        },
                        new
                        {
                            Id = 8,
                            CityId = 3,
                            CreatedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2673),
                            DistrictId = 3,
                            GovernorateId = 3,
                            LastModifiedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2674),
                            PhoneNumber = "01124464869",
                            Status = "UnHandled"
                        },
                        new
                        {
                            Id = 9,
                            CityId = 3,
                            CreatedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2677),
                            DistrictId = 3,
                            GovernorateId = 3,
                            LastModifiedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2678),
                            PhoneNumber = "01124464869",
                            Status = "UnHandled"
                        },
                        new
                        {
                            Id = 10,
                            CityId = 3,
                            CreatedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2681),
                            DistrictId = 3,
                            GovernorateId = 3,
                            LastModifiedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2682),
                            PhoneNumber = "01124464869",
                            Status = "UnHandled"
                        },
                        new
                        {
                            Id = 11,
                            CityId = 3,
                            CreatedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2684),
                            DistrictId = 3,
                            GovernorateId = 3,
                            LastModifiedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2685),
                            PhoneNumber = "01124464869",
                            Status = "UnHandled"
                        },
                        new
                        {
                            Id = 12,
                            CityId = 3,
                            CreatedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2688),
                            DistrictId = 3,
                            GovernorateId = 3,
                            LastModifiedDate = new DateTime(2023, 10, 29, 3, 0, 22, 856, DateTimeKind.Local).AddTicks(2689),
                            PhoneNumber = "01124464869",
                            Status = "UnHandled"
                        });
                });

            modelBuilder.Entity("TicketSystem.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TicketSystem.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TicketSystem.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSystem.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TicketSystem.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketSystem.Domain.Entities.City", b =>
                {
                    b.HasOne("TicketSystem.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TicketSystem.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("TicketSystem.Domain.Entities.District", b =>
                {
                    b.HasOne("TicketSystem.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TicketSystem.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("TicketSystem.Domain.Entities.Governorate", b =>
                {
                    b.HasOne("TicketSystem.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TicketSystem.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("TicketSystem.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("TicketSystem.Domain.Entities.City", "City")
                        .WithMany("Tickets")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSystem.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TicketSystem.Domain.Entities.District", "District")
                        .WithMany("Tickets")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSystem.Domain.Entities.Governorate", "Governorate")
                        .WithMany("Tickets")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSystem.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.Navigation("City");

                    b.Navigation("CreatedBy");

                    b.Navigation("District");

                    b.Navigation("Governorate");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("TicketSystem.Domain.Entities.City", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketSystem.Domain.Entities.District", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketSystem.Domain.Entities.Governorate", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
